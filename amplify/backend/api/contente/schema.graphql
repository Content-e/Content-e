
# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

type UserProfile
@model 
@auth(rules: [{ allow: owner }]) 
{
  id: ID!
  name: String!
  userEmail: String! @index
  description: String
  brand: [BrandProfile] @hasMany
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])
  userType: USER_TYPES!
  tiktokHandler: String
  bestPractices: [BestPractices] @hasMany
}

type BestPractices 
@model
@auth(rules: [{ allow: private, operations: [read]},{ allow: owner }])
{
  id: ID!
  headLine: String!
  description: String!
  urlPath: String!
  active: String! @index(name: "byStatus")
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])
}

type BrandProfile 
@model 
@auth(rules: [{ allow: private }]) 
{
  id: ID!
  name: String
  toneVoice: [String]
  pillars: [String]
  description: String
  internalMission: String
  strapLine: String
  userEmail: String @index 
  tiktokHandle: String
  vertical: String
  metaData: String
  briefs: [BrandBrief] @hasMany(indexName: "byBrand", fields:[ "id" ])
}

type BrandBrief 
@model
@auth(rules: [{ allow: private}])
{
  id: ID!
  BriefName: String
  vertical: String! @index (name: "byVertical")
  objective: String
  brandBriefDetails: String
  creativeInspirations: [String]
  active: Boolean 
  creativeRequests: [CreativeRequest] @hasMany(indexName: "byBrandBrief",fields:[ "id" ])
  brandId: ID! @index(name: "byBrand")
  brandProfile: BrandProfile @hasOne (fields: [ "brandId" ])
}

type CreativeRequest 
@model
@auth(rules: [{ allow: private}])
{
  brandBriefId: ID! @index (name: "byBrandBrief")
  creatorId: String! @index (name: "byCreator")
  status: String! @index (name: "byStatus")
  tiktokCreativeUrl: String!
  tiktokVideoCode: String!
  creativeTiktokHandle: String
  creatorDescription: String
}

enum USER_TYPES{
  CREATIVE_USER
  BRAND_USER
  ADMIN_USER
}
enum GPT_PROMPT {
  BRAND_NAME
  BRAND_NAME_REFRESH
  BRAND_PILLARS
  BRAND_VALUES
  BRAND_MISSION_STATEMENT
  BRAND_MISSION_STATEMENT_REFRESH
  BRAND_TAGLINE_STATEMENT
  BRAND_TAGLINE_STATEMENT_REFRESH
  BRAND_PILLARS_REFRESH
}
enum GPT_RESPONSE_TYPE {
  BRAND_NAME
  BRAND_NAME_REFRESH
  BRAND_PILLARS
  BRAND_VALUES
  BRAND_MISSION_STATEMENT
  BRAND_TAGLINE_STATEMENT
  BRAND_TAGLINE_STATEMENT_REFRESH
  BRAND_MISSION_STATEMENT_REFRESH
  BRAND_PILLARS_REFRESH
}

input GPT_INPUT {
  context: String
  prompType: GPT_PROMPT!
  businessDescription: String
  toneOfVoice: String
  brandName: String
  brandPillars: [String]
  brandMissionStatement: String
  tagLine: String
}

type GPT_RESPONSE @aws_cognito_user_pools {
  responseType: GPT_RESPONSE_TYPE
  BRAND_NAME: String
  BRAND_NAME_REFRESH: String
  BRAND_PILLARS: String
  BRAND_PILLARS_REFRESH: String
  BRAND_VALUES: String
  BRAND_MISSION_STATEMENT: String
  BRAND_TAGLINE_STATEMENT: String
  BRAND_TAGLINE_STATEMENT_REFRESH: String
  BRAND_MISSION_STATEMENT_REFRESH: String
  error: Boolean
  message: String
}

input EMAIL_INPUT {
  message: String!
  name: String!
  from: String!
}


type Query{
  getGPTresponse(data: GPT_INPUT): GPT_RESPONSE @function(name: "GPTLambda-${env}") @aws_iam @aws_cognito_user_pools
  sendEmail(data: EMAIL_INPUT): Boolean @function(name: "emailService-${env}")  @auth(rules: [{ allow: public }])
}

